# docker-compose.service.yml
# Service Geliştirme ortamı

networks:
  sentiric-net: 
    name: "${NETWORK_NAME:-sentiric-net}"
    driver: bridge
  
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  qdrant_data:  

services:
  # --- VERİ KATMANI ---
  postgres:
    build: 
      context: ../sentiric-postgres
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    build: 
      context: ../sentiric-rabbitmq
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["15672:15672", "5672:5672"]
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq/
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    build: { context: ../sentiric-redis }
    env_file: ["${ENV_FILE_PATH}"]  
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5  
      
  qdrant:
    build: { context: ../sentiric-qdrant }
    env_file: ["${ENV_FILE_PATH}"]
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always          

  # --- OTOMATİK ÖLÇEKLEYİCİ ---
  resource-autoscaler:
    build: 
      context: ../sentiric-resource-autoscaler
    env_file: ["${ENV_FILE_PATH}"]     
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # 1. e2-micro (1 vCPU, 1GB RAM) - En Düşük Seviye
    environment:
      - WATCH_CONTAINERS=postgres,rabbitmq,redis,qdrant
      - CPU_THRESHOLD=70               # Daha düşük threshold (sınırlı kaynak)
      - MEMORY_THRESHOLD_PERCENT=80    # Daha agresif memory management
      - CHECK_INTERVAL=20              # Daha uzun check interval (CPU tasarrufu)
      - SCALE_FACTOR=1.3               # Daha küçük scale artışları
      - COOLDOWN_PERIOD=120            # Daha uzun cooldown
      - MAX_MEMORY_MB=768              # 1GB RAM'in %75'i
      - MIN_MEMORY_MB=64               # Minimum memory
      - MAX_CPU_QUOTA=50000            # 1 vCPU = 100000, %50 sınır
      - MIN_CPU_QUOTA=10000            # Minimum CPU
      - LOG_LEVEL=changes              # Sadece değişiklikleri logla `all`   # Tüm logları görmek için
      - STATS_HISTORY_COUNT=3          # Daha az history (memory tasarrufu)

      # 2. e2-small (2 vCPU, 2GB RAM) - Orta Seviye      
      # environment:
      #   - WATCH_CONTAINERS=postgres,rabbitmq,redis,qdrant
      #   - CPU_THRESHOLD=75               # Standart threshold
      #   - MEMORY_THRESHOLD_PERCENT=82    # Balanced memory threshold
      #   - CHECK_INTERVAL=15              # Standart check interval
      #   - SCALE_FACTOR=1.4               # Orta seviye scale
      #   - COOLDOWN_PERIOD=90             # Standart cooldown
      #   - MAX_MEMORY_MB=1536             # 2GB RAM'in %75'i
      #   - MIN_MEMORY_MB=128              # Minimum memory
      #   - MAX_CPU_QUOTA=80000            # 2 vCPU = 200000, %40 sınır
      #   - MIN_CPU_QUOTA=15000            # Minimum CPU
      #   - LOG_LEVEL=changes              # Sadece değişiklikleri logla
      #   - STATS_HISTORY_COUNT=4          # Orta seviye history

      # 3. e2-medium (2 vCPU, 4GB RAM) - Önerilen Başlangıç
      # environment:
      #   - WATCH_CONTAINERS=postgres,rabbitmq,redis,qdrant
      #   - CPU_THRESHOLD=78               # Biraz daha yüksek threshold
      #   - MEMORY_THRESHOLD_PERCENT=85    # Standart memory threshold
      #   - CHECK_INTERVAL=15              # Standart check interval
      #   - SCALE_FACTOR=1.5               # Standart scale faktör
      #   - COOLDOWN_PERIOD=75             # Biraz daha kısa cooldown
      #   - MAX_MEMORY_MB=3072             # 4GB RAM'in %75'i
      #   - MIN_MEMORY_MB=256              # Daha yüksek minimum memory
      #   - MAX_CPU_QUOTA=120000           # 2 vCPU = 200000, %60 sınır
      #   - MIN_CPU_QUOTA=20000            # Minimum CPU
      #   - LOG_LEVEL=changes              # Sadece değişiklikleri logla
      #   - STATS_HISTORY_COUNT=5          # Standart history

      # 4. e2-standard-2 (2 vCPU, 8GB RAM) - Production için
      # environment:
      #   - WATCH_CONTAINERS=postgres,rabbitmq,redis,qdrant
      #   - CPU_THRESHOLD=80               # Production threshold
      #   - MEMORY_THRESHOLD_PERCENT=87    # Yüksek memory threshold
      #   - CHECK_INTERVAL=10              # Daha sık check
      #   - SCALE_FACTOR=1.6               # Daha agresif scale
      #   - COOLDOWN_PERIOD=60             # Daha kısa cooldown
      #   - MAX_MEMORY_MB=6144             # 8GB RAM'in %75'i
      #   - MIN_MEMORY_MB=512              # Yüksek minimum memory
      #   - MAX_CPU_QUOTA=160000           # 2 vCPU = 200000, %80 sınır
      #   - MIN_CPU_QUOTA=30000            # Daha yüksek minimum CPU
      #   - LOG_LEVEL=changes              # Sadece değişiklikleri logla
      #   - STATS_HISTORY_COUNT=6          # Daha fazla history

    networks: [sentiric-net]
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ps", "aux | grep resource-autoscaler.sh"]
      interval: 30s
      timeout: 10s
      retries: 3